/**
 * ANDES Lab - University of California, Merced
   This class provides Routing via linkstate routing.
 *
 * @author Adam Pluguez CSE160
 * @date   2/21/19
 */

module RoutingP{
   
   uses interface Receive as RouteReceive;
   uses interface Random as Random;
   uses interface Timer<TMilli> as RouteTimer;
   uses interface SimpleSend as RouteSender;
   uses interface List<linkState> as linkStateList;
   uses interface List<linkState> as linkStateList2;
   uses interface List<routeEntry> as routingTable;
   uses interface List<pack> as sentList;
   uses interface BusyWait<TMicro, uint16_t>;
   //uses interface Counter<TMicro, uint16_t>;
   uses interface NeighborDiscovery;
   provides interface Routing;

}

implementation{
   uint16_t sequence = 0;
   uint16_t linkStateListSize;
   uint16_t sent=0;
   uint16_t resent=0;
   uint16_t received=0;
   uint16_t* receivedA;
   uint16_t receivedSize = 0;
   pack routePackage; 
   void makePack(pack *Package, uint16_t src, uint16_t dest, uint16_t TTL, uint16_t Protocol, uint16_t seq, uint8_t *payload, uint8_t length);uint16_t size;
   bool checkSentList(pack *Package);
   bool inList(linkState state);
   bool inListOlder(linkState state);
   void removeState(uint16_t id);
   void createLinkList();
   void checkNeighbors();
   void emptyList();
   void getLinkState(uint16_t node);
   uint16_t compareNeighbors(moteN* list1, moteN* list2, uint16_t size1, uint16_t size2);
   
   event void RouteTimer.fired(){ 
		uint16_t i;
		linkState temp;
		//emptyList();
		if(call linkStateList.isEmpty()){
			createLinkList();	
		}
		else{
			
			//dbg(ROUTING_CHANNEL, "id: %d, Node  %d\n",temp.id, TOS_NODE_ID);
			//dbg(ROUTING_CHANNEL, "listsize: %d, Node size  %d\n",temp.size, call NeighborDiscovery.neighborListSize());
			if(temp.size < call NeighborDiscovery.neighborListSize()){
				emptyList();
				createLinkList();	
			}
			
			//checkNeighbors();
		}
		
   }
   
   event message_t* RouteReceive.receive(message_t* msg, void* payload, uint8_t len){	
		uint16_t i;
		pack* myMsg=(pack*) payload;
		linkState* Payload = (linkState*) myMsg->payload;
		if(!(checkSentList(myMsg)) && myMsg->protocol == PROTOCOL_LINKSTATE&& myMsg->TTL != 0 ){
			if(myMsg->dest == AM_BROADCAST_ADDR){
				if(TOS_NODE_ID == 1 ){
					//dbg(ROUTING_CHANNEL,"Received LINKSTATE PACKET AT %d from %d Resending.. TTL:%d\n", TOS_NODE_ID, myMsg->src,myMsg->TTL);
					
				}
				received++;
				if(!inList(*Payload)){					
					call linkStateList.pushback(*Payload);
				}
				//updateLinkStateList();
 //updateLSTable((uint8_t *)myMsg->payload, myMsg->src);				
				sent++;
				makePack(&routePackage, myMsg->src, myMsg->dest, --myMsg->TTL, myMsg->protocol, myMsg->seq,(uint8_t*) myMsg->payload, PACKET_MAX_PAYLOAD_SIZE);
				call sentList.pushback(routePackage);
				call RouteSender.send(routePackage, AM_BROADCAST_ADDR);
				return msg;
			}
			
		}
		return msg;
	}
	
   command void Routing.createTable(){
		 createLinkList();
   }
   
   command void Routing.emptyLinkStateList(){
   uint16_t i;
	for(i = 0; i < call linkStateList.size();i++){
			call linkStateList.popfront();
	}
   }
   
   
   command void Routing.createTableRun(){
		
	}
   
   command void Routing.printRoutingTable(){
   
	
   }
   
   command void Routing.printLinkState(){
	/*
	if(call linkStateList.size() < call linkStateList2.size()){
		dbg(ROUTING_CHANNEL, "linkstatelist size: %d\n",  call linkStateList.size());
		dbg(ROUTING_CHANNEL,"sent: %d resent %d received %d\n", sent,resent, received);
	}
	else{
		dbg(ROUTING_CHANNEL, "linkstatelist size: %d\n",  call linkStateList2.size());
		dbg(ROUTING_CHANNEL,"sent: %d resent %d received %d\n", sent,resent, received);
	}
	
	dbg(ROUTING_CHANNEL, "linkstatelist size: %d\n",  call linkStateList.size());
	dbg(ROUTING_CHANNEL,"sent: %d received %d\n", sent, received);
   */
		uint16_t i;
		uint16_t k;
		dbg(ROUTING_CHANNEL, "linkstatelist size: %d\n",  call linkStateList.size());
		for(i= 0; i < call linkStateList.size();i++){
			linkState temp = call linkStateList.get(i);
			dbg(ROUTING_CHANNEL, "Node: %d\n",temp.id);
			for(k=0;k < temp.size; k++){
				dbg(ROUTING_CHANNEL, "Neighbor: %d\n",temp.neighborList[k].id);
			}
		}
		dbg(ROUTING_CHANNEL,"sent: %d received %d\n", sent, received);
   
   }
   
   command uint16_t Routing.nextHop(uint16_t destination){
   
   }
   void checkNeighbors(){
	uint16_t i;
	uint16_t flag1 = 0;
	uint16_t flag2 = 0;
	uint16_t lastNeighbor = 0;
	linkState temp;
	moteN* temp2 = call NeighborDiscovery.neighborList();
	bool stateChange = FALSE;
	uint16_t listsize = call NeighborDiscovery.neighborListSize();
	//Compare to current linkstate neighbor list
	for(i= 0; i < call linkStateList.size();i++){
		temp = call linkStateList.popfront();
		if(temp.id == TOS_NODE_ID){
			dbg(ROUTING_CHANNEL, "id: %d, Node  %d\n",temp.id, TOS_NODE_ID);
			dbg(ROUTING_CHANNEL, "listsize: %d, Node size  %d\n",temp.size, call NeighborDiscovery.neighborListSize());
			if(temp.size != call NeighborDiscovery.neighborListSize()){
				if(temp.size != call NeighborDiscovery.neighborListSize())
					flag1 = compareNeighbors(temp.neighborList,temp2,temp.size,listsize);
				
			}
			
		}
	
		call linkStateList.pushback(temp);
		
	}
	
	if(flag1 != 0 ){
		if(flag1 < TOS_NODE_ID){
			flag1++;
		}
		else{
			removeState(flag1);
			dbg(ROUTING_CHANNEL, "FLAGGED%d  remove ing %d\n",flag1,flag1);
		}
	}	
	
}	

   
   uint16_t compareNeighbors(moteN* list1, moteN* list2, uint16_t size1, uint16_t size2 ){
	uint16_t k;
	uint16_t j;
	for(k=0; k< size1;k++){
	 for(j=0 ;j<size2;j++){
		dbg(ROUTING_CHANNEL, "oldlist: %d, Newlist  %d\n",list1[k].id, list2[k].id );
		
		if(list1[k].id !=  list2[j].id ){
			return list1[k].id;
			//stateChange == TRUE;
			//emptyList();
			//removeState(list1[k].id);
			//listsize--;
			//temp3.neighborList = temp2;
			//temp3.id == TOS_NODE_ID;
			//temp3.size == call NeighborDiscovery.neighborListSize();
			//dbg(ROUTING_CHANNEL, "removed %d \n",list1[k].id);
			//call linkStateList.pushback(temp3);

		}
		
	 }
	}
   }
   
   void createLinkList(){
		linkState Payload;
		linkState* payload = &Payload;
	
		//dbg(ROUTING_CHANNEL,"LINKSTATE PACKET BROADCAST %d\n", sent);
		payload->id = TOS_NODE_ID;
		payload->neighborList = call NeighborDiscovery.neighborList();
		payload->size = call NeighborDiscovery.neighborListSize();
		payload->seq = sequence;
		makePack(&routePackage, TOS_NODE_ID, AM_BROADCAST_ADDR, 20, PROTOCOL_LINKSTATE, sequence++,(uint8_t*) payload, PACKET_MAX_PAYLOAD_SIZE);
		call sentList.pushback(routePackage);
		if(!inList(Payload))
			call linkStateList.pushback(Payload);
		call RouteSender.send(routePackage, AM_BROADCAST_ADDR);
		
   }
   
   bool checkSentList(pack *Package){
		uint16_t i;
		for(i = 0; i < call sentList.size(); i++){
			pack current = call sentList.get(i);
			if(current.src == Package->src)
				if(current.seq == Package->seq)
					return TRUE;
		}
		return FALSE;
    }
	
  void emptyList(){
   uint16_t i;
	for(i = 0; i < call linkStateList.size();i++){
			call linkStateList.popfront();
	}
   }
   
   bool inList(linkState state){
	uint16_t i;
	for(i = 0; i < call linkStateList.size(); i++){
		linkState current = call linkStateList.get(i);
		if(current.id == state.id)
				return TRUE;
		
	}
		return FALSE;
   }
   
   void removeState(uint16_t id){
	   uint16_t i;
	   //dbg(ROUTING_CHANNEL, "removingdel %d\n",id );
	   for(i = 0; i < call linkStateList.size(); i++){
			linkState current = call linkStateList.popfront();
			if(current.id == id){
				return;
			}
			else{
				call linkStateList.pushback(current);
			}
		}
		return;
   }
   
   bool inListOlder(linkState state){
	uint16_t i;
	for(i = 0; i < call linkStateList.size(); i++){
		linkState current = call linkStateList.get(i);
		if(current.id == state.id)
			if(current.seq < state.seq)
				return TRUE;
		
	}
		return FALSE;
   }
   
   void makePack(pack *Package, uint16_t src, uint16_t dest, uint16_t TTL, uint16_t protocol, uint16_t seq, uint8_t *payload, uint8_t length){
      Package->src = src;
      Package->dest = dest;
      Package->TTL = TTL;
      Package->seq = seq;
      Package->protocol = protocol;
      memcpy(Package->payload, payload, length);
   }
   
}
